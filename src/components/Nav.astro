---
import cn from 'classnames';
import { Image } from 'astro:assets';
import CbaLogo from '../assets/cba-logo.png';

const links = [
  { text: 'Home', href: '/' },
  { text: 'About', href: '/about' },
  { text: '', href: '', isDummy: true },
  { text: 'History', href: '/history' },
  { text: 'Events', href: '/events' }
];

const inlineSvgs = new Map([
  [
    'Home',
    `<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
  <path stroke-linecap="round" stroke-linejoin="round" d="m2.25 12 8.954-8.955c.44-.439 1.152-.439 1.591 0L21.75 12M4.5 9.75v10.125c0 .621.504 1.125 1.125 1.125H9.75v-4.875c0-.621.504-1.125 1.125-1.125h2.25c.621 0 1.125.504 1.125 1.125V21h4.125c.621 0 1.125-.504 1.125-1.125V9.75M8.25 21h8.25" />
  </svg>`
  ],

  [
    'About',
    `<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
  <path stroke-linecap="round" stroke-linejoin="round" d="m11.25 11.25.041-.02a.75.75 0 0 1 1.063.852l-.708 2.836a.75.75 0 0 0 1.063.853l.041-.021M21 12a9 9 0 1 1-18 0 9 9 0 0 1 18 0Zm-9-3.75h.008v.008H12V8.25Z" />
</svg>`
  ],

  [
    'History',
    `<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
  <path stroke-linecap="round" stroke-linejoin="round" d="M12 21a9.004 9.004 0 0 0 8.716-6.747M12 21a9.004 9.004 0 0 1-8.716-6.747M12 21c2.485 0 4.5-4.03 4.5-9S14.485 3 12 3m0 18c-2.485 0-4.5-4.03-4.5-9S9.515 3 12 3m0 0a8.997 8.997 0 0 1 7.843 4.582M12 3a8.997 8.997 0 0 0-7.843 4.582m15.686 0A11.953 11.953 0 0 1 12 10.5c-2.998 0-5.74-1.1-7.843-2.918m15.686 0A8.959 8.959 0 0 1 21 12c0 .778-.099 1.533-.284 2.253m0 0A17.919 17.919 0 0 1 12 16.5c-3.162 0-6.133-.815-8.716-2.247m0 0A9.015 9.015 0 0 1 3 12c0-1.605.42-3.113 1.157-4.418" />
  </svg>
  `
  ],

  [
    'Events',
    `<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
  <path stroke-linecap="round" stroke-linejoin="round" d="M6.75 3v2.25M17.25 3v2.25M3 18.75V7.5a2.25 2.25 0 0 1 2.25-2.25h13.5A2.25 2.25 0 0 1 21 7.5v11.25m-18 0A2.25 2.25 0 0 0 5.25 21h13.5A2.25 2.25 0 0 0 21 18.75m-18 0v-7.5A2.25 2.25 0 0 1 5.25 9h13.5A2.25 2.25 0 0 1 21 11.25v7.5m-9-6h.008v.008H12v-.008ZM12 15h.008v.008H12V15Zm0 2.25h.008v.008H12v-.008ZM9.75 15h.008v.008H9.75V15Zm0 2.25h.008v.008H9.75v-.008ZM7.5 15h.008v.008H7.5V15Zm0 2.25h.008v.008H7.5v-.008Zm6.75-4.5h.008v.008h-.008v-.008Zm0 2.25h.008v.008h-.008V15Zm0 2.25h.008v.008h-.008v-.008Zm2.25-4.5h.008v.008H16.5v-.008Zm0 2.25h.008v.008H16.5V15Z" />
  </svg>
  `
  ]
]);

const parsePathname = (pathname: string) => pathname.replace(/\//g, '');
const pathnamesAreEqual = (p1: string, p2: string) =>
  parsePathname(p1) === parsePathname(p2);
---

<nav
  id="top-nav"
  class="hidden md:block relative px-5 py-3 md:p-0 bg-primary-green"
>
  <ul
    class="hidden text-primary-header-light md:flex justify-between max-w-[600px] m-auto p-7 relative"
  >
    {
      links.map((link) => (
        <li
          class={cn({
            'text-cta-color font-bold': pathnamesAreEqual(
              link.href,
              Astro.url.pathname
            )
          })}
        >
          <a href={link.href}>{link.text}</a>

          {link.isDummy ? (
            <a href="/">
              <Image
                id="top-nav-desktop-logo"
                src={CbaLogo}
                alt="CBA Logo"
                class="z-10 absolute top-2 left-[42%] w-[15%]"
              />
            </a>
          ) : null}
        </li>
      ))
    }
  </ul>
</nav>

<nav
  id="mobile-nav-bottom"
  class="md:hidden pb-safe fixed bottom-0 left-0 bg-primary-green w-full z-10 px-8"
>
  <ul class="flex justify-between h-full items-center">
    {
      links
        .filter((link) => !link.isDummy)
        .map((link) => {
          const Icon = inlineSvgs.get(link.text);

          return (
            <li class="text-primary-header-light">
              <a
                href={link.href}
                class={cn(
                  'text-[10px] xs:text-xs sm:text-sm flex flex-col items-center',
                  {
                    'text-cta-color': pathnamesAreEqual(
                      link.href,
                      Astro.url.pathname
                    )
                  }
                )}
              >
                {!Icon ? null : <span set:html={Icon} />}
                {link.text}
              </a>
            </li>
          );
        })
    }
  </ul>
</nav>
